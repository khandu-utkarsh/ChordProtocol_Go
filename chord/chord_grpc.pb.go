// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.11
// source: chord.proto

package chord

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChordServiceClient is the client API for ChordService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChordServiceClient interface {
	FindSuccessor(ctx context.Context, in *NodeMessage, opts ...grpc.CallOption) (*NodeMessage, error)
	FindPredecessor(ctx context.Context, in *NodeMessage, opts ...grpc.CallOption) (*NodeMessage, error)
	Notify(ctx context.Context, in *NodeMessage, opts ...grpc.CallOption) (*NodeMessage, error)
	IsAlive(ctx context.Context, in *NodeMessage, opts ...grpc.CallOption) (*NodeMessage, error)
	AddKeyValueToStore(ctx context.Context, in *NodeMessage, opts ...grpc.CallOption) (*NodeMessage, error)
	IsKeyPresentInStore(ctx context.Context, in *NodeMessage, opts ...grpc.CallOption) (*NodeMessage, error)
	GetValueOfKeyInStore(ctx context.Context, in *NodeMessage, opts ...grpc.CallOption) (*NodeMessage, error)
}

type chordServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChordServiceClient(cc grpc.ClientConnInterface) ChordServiceClient {
	return &chordServiceClient{cc}
}

func (c *chordServiceClient) FindSuccessor(ctx context.Context, in *NodeMessage, opts ...grpc.CallOption) (*NodeMessage, error) {
	out := new(NodeMessage)
	err := c.cc.Invoke(ctx, "/chord.ChordService/FindSuccessor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordServiceClient) FindPredecessor(ctx context.Context, in *NodeMessage, opts ...grpc.CallOption) (*NodeMessage, error) {
	out := new(NodeMessage)
	err := c.cc.Invoke(ctx, "/chord.ChordService/FindPredecessor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordServiceClient) Notify(ctx context.Context, in *NodeMessage, opts ...grpc.CallOption) (*NodeMessage, error) {
	out := new(NodeMessage)
	err := c.cc.Invoke(ctx, "/chord.ChordService/Notify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordServiceClient) IsAlive(ctx context.Context, in *NodeMessage, opts ...grpc.CallOption) (*NodeMessage, error) {
	out := new(NodeMessage)
	err := c.cc.Invoke(ctx, "/chord.ChordService/IsAlive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordServiceClient) AddKeyValueToStore(ctx context.Context, in *NodeMessage, opts ...grpc.CallOption) (*NodeMessage, error) {
	out := new(NodeMessage)
	err := c.cc.Invoke(ctx, "/chord.ChordService/AddKeyValueToStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordServiceClient) IsKeyPresentInStore(ctx context.Context, in *NodeMessage, opts ...grpc.CallOption) (*NodeMessage, error) {
	out := new(NodeMessage)
	err := c.cc.Invoke(ctx, "/chord.ChordService/IsKeyPresentInStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordServiceClient) GetValueOfKeyInStore(ctx context.Context, in *NodeMessage, opts ...grpc.CallOption) (*NodeMessage, error) {
	out := new(NodeMessage)
	err := c.cc.Invoke(ctx, "/chord.ChordService/GetValueOfKeyInStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChordServiceServer is the server API for ChordService service.
// All implementations must embed UnimplementedChordServiceServer
// for forward compatibility
type ChordServiceServer interface {
	FindSuccessor(context.Context, *NodeMessage) (*NodeMessage, error)
	FindPredecessor(context.Context, *NodeMessage) (*NodeMessage, error)
	Notify(context.Context, *NodeMessage) (*NodeMessage, error)
	IsAlive(context.Context, *NodeMessage) (*NodeMessage, error)
	AddKeyValueToStore(context.Context, *NodeMessage) (*NodeMessage, error)
	IsKeyPresentInStore(context.Context, *NodeMessage) (*NodeMessage, error)
	GetValueOfKeyInStore(context.Context, *NodeMessage) (*NodeMessage, error)
	mustEmbedUnimplementedChordServiceServer()
}

// UnimplementedChordServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChordServiceServer struct {
}

func (UnimplementedChordServiceServer) FindSuccessor(context.Context, *NodeMessage) (*NodeMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindSuccessor not implemented")
}
func (UnimplementedChordServiceServer) FindPredecessor(context.Context, *NodeMessage) (*NodeMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPredecessor not implemented")
}
func (UnimplementedChordServiceServer) Notify(context.Context, *NodeMessage) (*NodeMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Notify not implemented")
}
func (UnimplementedChordServiceServer) IsAlive(context.Context, *NodeMessage) (*NodeMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsAlive not implemented")
}
func (UnimplementedChordServiceServer) AddKeyValueToStore(context.Context, *NodeMessage) (*NodeMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddKeyValueToStore not implemented")
}
func (UnimplementedChordServiceServer) IsKeyPresentInStore(context.Context, *NodeMessage) (*NodeMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsKeyPresentInStore not implemented")
}
func (UnimplementedChordServiceServer) GetValueOfKeyInStore(context.Context, *NodeMessage) (*NodeMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValueOfKeyInStore not implemented")
}
func (UnimplementedChordServiceServer) mustEmbedUnimplementedChordServiceServer() {}

// UnsafeChordServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChordServiceServer will
// result in compilation errors.
type UnsafeChordServiceServer interface {
	mustEmbedUnimplementedChordServiceServer()
}

func RegisterChordServiceServer(s grpc.ServiceRegistrar, srv ChordServiceServer) {
	s.RegisterService(&ChordService_ServiceDesc, srv)
}

func _ChordService_FindSuccessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServiceServer).FindSuccessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chord.ChordService/FindSuccessor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServiceServer).FindSuccessor(ctx, req.(*NodeMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChordService_FindPredecessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServiceServer).FindPredecessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chord.ChordService/FindPredecessor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServiceServer).FindPredecessor(ctx, req.(*NodeMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChordService_Notify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServiceServer).Notify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chord.ChordService/Notify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServiceServer).Notify(ctx, req.(*NodeMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChordService_IsAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServiceServer).IsAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chord.ChordService/IsAlive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServiceServer).IsAlive(ctx, req.(*NodeMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChordService_AddKeyValueToStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServiceServer).AddKeyValueToStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chord.ChordService/AddKeyValueToStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServiceServer).AddKeyValueToStore(ctx, req.(*NodeMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChordService_IsKeyPresentInStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServiceServer).IsKeyPresentInStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chord.ChordService/IsKeyPresentInStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServiceServer).IsKeyPresentInStore(ctx, req.(*NodeMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChordService_GetValueOfKeyInStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServiceServer).GetValueOfKeyInStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chord.ChordService/GetValueOfKeyInStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServiceServer).GetValueOfKeyInStore(ctx, req.(*NodeMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// ChordService_ServiceDesc is the grpc.ServiceDesc for ChordService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChordService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chord.ChordService",
	HandlerType: (*ChordServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindSuccessor",
			Handler:    _ChordService_FindSuccessor_Handler,
		},
		{
			MethodName: "FindPredecessor",
			Handler:    _ChordService_FindPredecessor_Handler,
		},
		{
			MethodName: "Notify",
			Handler:    _ChordService_Notify_Handler,
		},
		{
			MethodName: "IsAlive",
			Handler:    _ChordService_IsAlive_Handler,
		},
		{
			MethodName: "AddKeyValueToStore",
			Handler:    _ChordService_AddKeyValueToStore_Handler,
		},
		{
			MethodName: "IsKeyPresentInStore",
			Handler:    _ChordService_IsKeyPresentInStore_Handler,
		},
		{
			MethodName: "GetValueOfKeyInStore",
			Handler:    _ChordService_GetValueOfKeyInStore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chord.proto",
}
